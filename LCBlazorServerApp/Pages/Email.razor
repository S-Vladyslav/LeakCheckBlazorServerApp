@page "/email"

<PageTitle>Email check</PageTitle>

@using LCBlazorServerApp.Data;
@using DataAccess.Context;
@using DataAccess.Interfaces;
@using DataAccess;
@using LCBlazorServerApp;
@using DataAccess.Models;
@using DataAccess.Services;

<h1>Email address check</h1>

<input type="text" @bind="target" />
<button class="btn btn-primary" @onclick="@Check">Check</button>

@if (!LeakListForOutPut.Any() && !clicked && !loaded)
{
    <p><em>Enter domain and click button</em></p>
}
else if (!LeakListForOutPut.Any() && clicked && !loaded)
{
    <p><em>Loading...</em></p>
}
else if (!LeakListForOutPut.Any() && clicked && loaded)
{
    <p><em>No Leaks</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Login</th>
                <th>Password</th>
                <th>Last breach</th>
                <th>Source</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var leakLine in LeakListForOutPut)
            {
                <tr>
                    <td>@leakLine.EmailAddress</td>
                    <td>@leakLine.Password</td>
                    <td>@leakLine.LastBreach</td>
                    <td>@leakLine.Source</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string? target;
    private IConfiguration? Configuration;
    private List<EmailLeak> LeakList = new List<EmailLeak>();
    private List<EmailLeak> LeakListForOutPut = new List<EmailLeak>();

    private bool clicked = false;
    private bool loaded = false;

    private async void Check()
    {
        clicked = true;

        if (target == null)
        {
            clicked = false;
            return;
        }

        await Task.Run(() => {

            LeakList = LeakChecker.WeLeakInfoGetResults<EmailLeak>("email", target);

            var emailLeakService = new EmailLeakService();
            var uOW = new UnitOfWorkFactory();

            uOW.SetConnectionString(ConnectionConfiguration.ConnectionString);
            emailLeakService.SetUnitOfWorkFactory(uOW);

            emailLeakService.AddEmailLeaks(LeakList);
            LeakListForOutPut = emailLeakService.GetEmailLeaksByEmail(target);

            loaded = true;

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        });
    }
}
